---
import BlogPost from "@components/BlogPost.astro";
import SelectableTag from "@components/SelectableTag.astro";
import Layout from "@layout/Layout.astro";

import readingTime from "reading-time";

let allPosts = await Astro.glob("./*.md");
// sort by date
allPosts = allPosts.sort((a, b) => {
  let dateA = new Date(a.frontmatter.pubDate),
    dateB = new Date(b.frontmatter.pubDate);
  if (dateA < dateB) return 1;
  if (dateA > dateB) return -1;
  return 0;
});

const tags = [
  ...new Set(
    allPosts
      .map((post) => post.frontmatter.tags)
      .flat()
      .sort()
  ),
];
---

<Layout
  pageTitle="Blog"
  description="Talk is cheap, show me the code DJOLE."
  type="article"
>
  <main class="px-8 pt-16 mx-auto max-w-6xl sm:pt-24 lg:px-16">
    <div class="flex flex-col mt-4 space-y-8">
      <div class="flex flex-col space-y-4">
        <h1
          class="text-4xl font-bold tracking-tighter sm:text-5xl max-w-[25ch]"
        >
        My blog posts
        </h1>
        <p class="text-primary-300 max-w-[65ch]">
          Sometimes I write about my experiences, thoughts, and projects. Here are some of my blog posts.
        </p>
        
        <h2
          class="text-3xl font-bold tracking-tighter sm:text-4xl max-w-[25ch]"
        >
          Filter by tags:
        </h2>
      </div>
      <div class="mb-8">
        <ul class="flex flex-row flex-wrap gap-2">
          {tags.map((t) => <SelectableTag name={t} />)}
        </ul>
      </div>
      <div class="flex flex-col gap-8">
        {
          allPosts.map((p) => (
            <div class="blog-post-item filtered-in">
              <BlogPost
                date={new Date(p.frontmatter.pubDate).toLocaleDateString(
                  "en-US",
                  {
                    month: "long",
                    day: "numeric",
                    year: "numeric",
                  }
                )}
                readTime={readingTime(p.rawContent()).text}
                title={p.frontmatter.title}
                description={p.frontmatter.description}
                tags={p.frontmatter.tags}
                url={p.url}
              />
            </div>
          ))
        }
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ tags }}>
  let blogPostItems = document.querySelectorAll(".blog-post-item");
  let blogPosts = document.querySelectorAll("div[data-tags]");
  let filters = document.querySelectorAll("input");

  let tagMap = Object.assign(...tags.map((t) => ({ [t]: false })));

  for (const filter of filters) {
    filter.addEventListener("change", (e) => {
      let isChecked = e.target.checked;
      let name = filter.name;
      tagMap[name] = isChecked;

      filterBlogPosts();
    });
  }

  function filterBlogPosts() {
    let checkedTags = Object.keys(tagMap).filter((t) => tagMap[t] === true);

    blogPostItems.forEach((blogPostItem) => {
      const blogPost = blogPostItem.querySelector("div[data-tags]");
      if (blogPost) {
        let tags = blogPost.dataset.tags.split(",");
        let shouldShow = checkedTags.length === 0 || checkedTags.every((t) => tags.includes(t));
        
        if (shouldShow) {
          blogPostItem.classList.remove('filtered-out');
          blogPostItem.classList.add('filtered-in');
        } else {
          blogPostItem.classList.remove('filtered-in');
          blogPostItem.classList.add('filtered-out');
        }
      }
    });
  }
</script>
